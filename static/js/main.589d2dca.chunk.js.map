{"version":3,"sources":["components/FormToDo.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormTodo","addTodo","useState","value","setValue","Form","onSubmit","e","preventDefault","Group","Label","Control","type","id","onChange","target","placeholder","Button","variant","App","text","isDone","todos","setTodos","saveOrigArray","setsaveOrigArray","markTodo","index","newTodos","removeTodo","undefined","alert","splice","Todo","todo","className","style","textDecoration","onClick","filterArray","action","newFilterTodos","filter","item","Container","origArr","map","Card","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.589d2dca.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\n \r\n/*\r\n  FormTodo component : accepts the addTodo() as a parameter.\r\n  Handles the submission of a new item. \r\n  Submit : add item to array.\r\n*/\r\nfunction FormTodo({ addTodo }) {\r\n    const [value, setValue] = useState(\"\");\r\n  \r\n    function handleSubmit(e){\r\n      e.preventDefault();   \r\n      if (!value) return;   //if valus is empty \r\n      addTodo(value);       //call addTodo() function with the current value\r\n      setValue(\"\");         //clear value\r\n    }\r\n  \r\n    return (\r\n     \r\n      <Form onSubmit={handleSubmit}> \r\n      \r\n      <Form.Group>\r\n        <Form.Label><h4>Add Todo</h4></Form.Label>\r\n        <br/>\r\n        <Form.Control type=\"text\" id=\"customInput\"  \r\n            value={value} \r\n            onChange={e => setValue(e.target.value)} \r\n            placeholder=\"Whats Next?\" />\r\n             <Button variant=\"primary mb-3\" type=\"submit\">\r\n              Add Item\r\n            </Button>\r\n      </Form.Group>\r\n    </Form>\r\n\r\n   \r\n    );\r\n  }\r\n\r\n  export default FormTodo;","import './App.css';\r\n\r\nimport React from \"react\";\r\nimport { useState } from 'react';\r\nimport \"./App.css\";\r\nimport {Button,  Card, Container } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n//for nice icons, npm install react-icons\r\n//using: https://www.npmjs.com/package/react-icons\r\nimport { RiDeleteBinLine } from 'react-icons/ri'; \r\nimport { BsCheckBox } from 'react-icons/bs';\r\n\r\n\r\n//local components imports\r\nimport FormTodo from './components/FormToDo';\r\n//import Todo from './components/ToDoItem';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  //Set state: \r\n  //Set the array of todos[] which is going to hold the items and their status\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      text: \"Sample item...\",\r\n      isDone: false\r\n    }\r\n  ]);\r\n\r\n  const [saveOrigArray, setsaveOrigArray] = useState([\r\n    {\r\n      text: \"Sample item...\",\r\n      isDone: false\r\n    }\r\n  ]);\r\n\r\n\r\n\r\n\r\n  //Define short functions to : add, mark, delete items from the todos[] array  \r\n\r\n  //1. Add the new todo[] text to the array using spread operator.\r\n  function addTodo(text){\r\n    //the array that is dynmically worked on \r\n    const newTodos = [...todos, { text }];\r\n\r\n    //set a copy of it that will not be changed after filters and\r\n    //is used by \"all\" button.\r\n    let origArr = [...todos, { text }];\r\n\r\n    setTodos(newTodos);\r\n\r\n    setsaveOrigArray(origArr);\r\n    \r\n    //console.log(todos);\r\n\r\n  }\r\n\r\n  /***Mark item as done - ***\r\n  2. Copy all the todos using the spread operator to new array:  newTodos. \r\n     Mark the item as done by using the index parameter. \r\n     Set the newTodos as todos[] using setTodos (useState function).\r\n  */\r\n  function  markTodo (index) {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isDone = true;\r\n    setTodos(newTodos);\r\n  }\r\n  \r\n\r\n  /***Delete item ****\r\n  3. Get the index of the item . \r\n     Define new array using the spread operator.\r\n     Splice the array and remove the item  which index matches the index parameter\r\n     Make an alert in case the item is in status 'false' or empty \r\n     Set the newTodos as todos[] using setTodos (useState function).\r\n  */\r\n  function  removeTodo (index){\r\n    const newTodos = [...todos];\r\n   \r\n    if (todos[index].isDone === false || todos[index].isDone === undefined ){\r\n      alert(\"This item is not done yet, if you want to delete an item you should mark it as 'Done' before, using the green check mark\");\r\n    }\r\n    else{\r\n      newTodos.splice(index, 1);\r\n      setTodos(newTodos);\r\n\r\n      setsaveOrigArray(newTodos);\r\n    }\r\n  } \r\n\r\n  /*\r\n   Todo component. Displays the list of items. \r\n   Accepts the four parameters as props(called from main App)\r\n   Show buttons for marking items as Done and for removing an item.\r\n  */\r\n   function Todo({ todo, index, markTodo, removeTodo }) {\r\n    return (\r\n      <div className=\"todo\">\r\n          <span style={{ textDecoration: todo.isDone ? \"line-through\" : \"\" }}>{todo.text}</span>\r\n          <div>\r\n              <Button variant=\"outline-success\" onClick={() => markTodo(index)}><BsCheckBox/></Button>{' '}  \r\n              <Button variant=\"outline-danger\" onClick={() => removeTodo(index)}><RiDeleteBinLine/></Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  function filterArray(e, action){\r\n    \r\n    //it works but it changes the original array so the buttons\r\n    //cannot work one after the other as filter gives back \r\n    //everytime just part of the array \r\n\r\n    const newFilterTodos = [...todos];\r\n    \r\n    //all\r\n    if (action === 1){\r\n      setTodos(saveOrigArray);\r\n    }\r\n\r\n    //active\r\n    if (action === 2){\r\n      setTodos (newFilterTodos.filter(item => item.isDone !== true));\r\n    }\r\n\r\n    //completed\r\n    if (action === 3){\r\n      setTodos (newFilterTodos.filter(item => item.isDone === true));\r\n    }\r\n     \r\n  }\r\n\r\n/*\r\n  For each todo in the todos.map, pass the Todo component. \r\n  Pass it the  index, todo(), markTodo() and removeTodo() functions.\r\n*/  \r\n  return (\r\n    <div className=\"app\">\r\n    <Container>\r\n      <h1 className=\"text-center mb-4\">Todo List</h1>\r\n      \r\n      <FormTodo addTodo={addTodo} />\r\n      \r\n      <div className=\"itemsList\">\r\n        {todos.map((todo, index) => (\r\n          <Card>\r\n            <Card.Body>\r\n              <Todo\r\n                  key={index}\r\n                  index={index}\r\n                  todo={todo}\r\n                  markTodo={markTodo}\r\n                  removeTodo={removeTodo}\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"button\" \r\n            className=\"btn btn-outline-secondary footerBtn\"\r\n            onClick={e=> filterArray(e, 1)} > All</button>\r\n          \r\n        <button type=\"button\" \r\n            className=\"btn btn-outline-secondary footerBtn\"\r\n            onClick={e=> filterArray(e, 2)}>Active</button>\r\n\r\n        <button type=\"button\" \r\n            className=\"btn btn-outline-secondary footerBtn\"\r\n            onClick={e=> filterArray(e, 3)} > Completed </button>\r\n         \r\n      </div>\r\n    </Container>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}